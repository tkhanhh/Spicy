--[[
    User Interface Library
    Made by Late
]]
--// Connections
local GetService = game.GetService
local Connect = game.Loaded.Connect
local Wait = game.Loaded.Wait
local Clone = game.Clone
local Destroy = game.Destroy
if not game:IsLoaded() then
    local Loaded = game.Loaded
    Loaded.Wait(Loaded)
end
--// Important
local Setup = {
    Keybind = Enum.KeyCode.LeftControl,
    Transparency = 0.2,
    ThemeMode = 'Dark',
    Size = nil,
}
local Theme = { --// (Dark Theme)
    --// Frames:
    Primary = Color3.fromRGB(30, 30, 30),
    Secondary = Color3.fromRGB(35, 35, 35),
    Component = Color3.fromRGB(40, 40, 40),
    Interactables = Color3.fromRGB(45, 45, 45),
    --// Text:
    Tab = Color3.fromRGB(200, 200, 200),
    Title = Color3.fromRGB(240, 240, 240),
    Description = Color3.fromRGB(200, 200, 200),
    --// Outlines:
    Shadow = Color3.fromRGB(0, 0, 0),
    Outline = Color3.fromRGB(40, 40, 40),
    --// Image:
    Icon = Color3.fromRGB(220, 220, 220),
}
--// Services & Functions
local Type, Blur = nil
local LocalPlayer = GetService(game, 'Players').LocalPlayer
local Services = {
    Insert = GetService(game, 'InsertService'),
    Tween = GetService(game, 'TweenService'),
    Run = GetService(game, 'RunService'),
    Input = GetService(game, 'UserInputService'),
}
local Player = {
    Mouse = LocalPlayer:GetMouse(),
    GUI = LocalPlayer.PlayerGui,
}
local Tween = function(
    Object: Instance,
    Speed: number,
    Properties: {},
    Info: { EasingStyle: Enum?, EasingDirection: Enum? }
)
    local Style, Direction
    if Info then
        Style, Direction = Info['EasingStyle'], Info['EasingDirection']
    else
        Style, Direction = Enum.EasingStyle.Sine, Enum.EasingDirection.Out
    end
    return Services.Tween
        :Create(Object, TweenInfo.new(Speed, Style, Direction), Properties)
        :Play()
end
local SetProperty = function(Object: Instance, Properties: {})
    for Index, Property in next, Properties do
        Object[Index] = Property
    end
    return Object
end
local Multiply = function(Value, Amount)
    local New = {
        Value.X.Scale * Amount,
        Value.X.Offset * Amount,
        Value.Y.Scale * Amount,
        Value.Y.Offset * Amount,
    }
    return UDim2.new(unpack(New))
end
local Color = function(Color, Factor, Mode)
    Mode = Mode or Setup.ThemeMode
    if Mode == 'Light' then
        return Color3.fromRGB(
            (Color.R * 255) - Factor,
            (Color.G * 255) - Factor,
            (Color.B * 255) - Factor
        )
    else
        return Color3.fromRGB(
            (Color.R * 255) + Factor,
            (Color.G * 255) + Factor,
            (Color.B * 255) + Factor
        )
    end
end
local Drag = function(Canvas)
    if Canvas then
        local Dragging
        local DragInput
        local Start
        local StartPosition
        local function Update(input)
            local delta = input.Position - Start
            Canvas.Position = UDim2.new(
                StartPosition.X.Scale,
                StartPosition.X.Offset + delta.X,
                StartPosition.Y.Scale,
                StartPosition.Y.Offset + delta.Y
            )
        end
        Connect(Canvas.InputBegan, function(Input)
            if
                Input.UserInputType == Enum.UserInputType.MouseButton1
                or Input.UserInputType == Enum.UserInputType.Touch
                    and not Type
            then
                Dragging = true
                Start = Input.Position
                StartPosition = Canvas.Position
                Connect(Input.Changed, function()
                    if Input.UserInputState == Enum.UserInputState.End then
                        Dragging = false
                    end
                end)
            end
        end)
        Connect(Canvas.InputChanged, function(Input)
            if
                Input.UserInputType == Enum.UserInputType.MouseMovement
                or Input.UserInputType == Enum.UserInputType.Touch
                    and not Type
            then
                DragInput = Input
            end
        end)
        Connect(Services.Input.InputChanged, function(Input)
            if Input == DragInput and Dragging and not Type then
                Update(Input)
            end
        end)
    end
end
Resizing = {
    TopLeft = { X = Vector2.new(-1, 0), Y = Vector2.new(0, -1) },
    TopRight = { X = Vector2.new(1, 0), Y = Vector2.new(0, -1) },
    BottomLeft = { X = Vector2.new(-1, 0), Y = Vector2.new(0, 1) },
    BottomRight = { X = Vector2.new(1, 0), Y = Vector2.new(0, 1) },
}
Resizeable = function(Tab, Minimum, Maximum)
    task.spawn(function()
        local MousePos, Size, UIPos = nil, nil, nil
        if Tab and Tab:FindFirstChild('Resize') then
            local Positions = Tab:FindFirstChild('Resize')
            for Index, Types in next, Positions:GetChildren() do
                Connect(Types.InputBegan, function(Input)
                    if
                        Input.UserInputType == Enum.UserInputType.MouseButton1
                    then
                        Type = Types
                        MousePos = Vector2.new(Player.Mouse.X, Player.Mouse.Y)
                        Size = Tab.AbsoluteSize
                        UIPos = Tab.Position
                    end
                end)
                Connect(Types.InputEnded, function(Input)
                    if
                        Input.UserInputType == Enum.UserInputType.MouseButton1
                    then
                        Type = nil
                    end
                end)
            end
        end
        local Resize = function(Delta)
            if
                Type
                and MousePos
                and Size
                and UIPos
                and Tab:FindFirstChild('Resize')[Type.Name] == Type
            then
                local Mode = Resizing[Type.Name]
                local NewSize = Vector2.new(
                    Size.X + Delta.X * Mode.X.X,
                    Size.Y + Delta.Y * Mode.Y.Y
                )
                NewSize = Vector2.new(
                    math.clamp(NewSize.X, Minimum.X, Maximum.X),
                    math.clamp(NewSize.Y, Minimum.Y, Maximum.Y)
                )
                local AnchorOffset = Vector2.new(
                    Tab.AnchorPoint.X * Size.X,
                    Tab.AnchorPoint.Y * Size.Y
                )
                local NewAnchorOffset = Vector2.new(
                    Tab.AnchorPoint.X * NewSize.X,
                    Tab.AnchorPoint.Y * NewSize.Y
                )
                local DeltaAnchorOffset = NewAnchorOffset - AnchorOffset
                Tab.Size = UDim2.new(0, NewSize.X, 0, NewSize.Y)
                local NewPosition = UDim2.new(
                    UIPos.X.Scale,
                    UIPos.X.Offset + DeltaAnchorOffset.X * Mode.X.X,
                    UIPos.Y.Scale,
                    UIPos.Y.Offset + DeltaAnchorOffset.Y * Mode.Y.Y
                )
                Tab.Position = NewPosition
            end
        end
        Connect(Player.Mouse.Move, function()
            if Type then
                Resize(Vector2.new(Player.Mouse.X, Player.Mouse.Y) - MousePos)
            end
        end)
    end)
end
--// Setup [UI]
local Screen = Instance.new("ScreenGui")
Screen.Name = "UILibrary"
xpcall(function()
    Screen.Parent = game.CoreGui
end, function()
    Screen.Parent = Player.GUI
end)

local Components = Instance.new("Folder")
Components.Name = "Components"
Components.Parent = Screen

-- Create Notification Holder
local NotificationHolder = Instance.new("Frame")
NotificationHolder.Name = "Frame"
NotificationHolder.Size = UDim2.new(0, 300, 1, 0)
NotificationHolder.Position = UDim2.new(1, 0, 0, 0)
NotificationHolder.BackgroundTransparency = 1
NotificationHolder.Parent = Screen

local UIListLayout = Instance.new("UIListLayout")
UIListLayout.FillDirection = Enum.FillDirection.Vertical
UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Right
UIListLayout.VerticalAlignment = Enum.VerticalAlignment.Bottom
UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
UIListLayout.Padding = UDim.new(0, 5)
UIListLayout.Parent = NotificationHolder

-- Create Main Template
local MainTemplate = Instance.new("CanvasGroup")
MainTemplate.Name = "Main"
MainTemplate.Position = UDim2.new(0.5, 0, 0.5, 0)
MainTemplate.AnchorPoint = Vector2.new(0.5, 0.5)
MainTemplate.BackgroundColor3 = Theme.Primary
MainTemplate.Size = UDim2.new(0, 680, 0, 440) -- Default size
MainTemplate.Visible = false
MainTemplate.Parent = Screen

local Shadow = Instance.new("UIStroke")
Shadow.Name = "UIStroke"
Shadow.Transparency = 0.5
Shadow.Color = Theme.Shadow
Shadow.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
Shadow.Parent = MainTemplate

local BackgroundShadow = Instance.new("Frame")
BackgroundShadow.Name = "BackgroundShadow"
BackgroundShadow.Size = UDim2.new(1, 0, 1, 0)
BackgroundShadow.BackgroundColor3 = Theme.Shadow
BackgroundShadow.BackgroundTransparency = 1
BackgroundShadow.Parent = MainTemplate

local Sidebar = Instance.new("Frame")
Sidebar.Name = "Sidebar"
Sidebar.Size = UDim2.new(0, 150, 1, 0)
Sidebar.BackgroundColor3 = Theme.Secondary
Sidebar.Parent = MainTemplate

local Top = Instance.new("Frame")
Top.Name = "Top"
Top.Size = UDim2.new(1, 0, 0, 30)
Top.BackgroundTransparency = 1
Top.Parent = Sidebar

local Buttons = Instance.new("Frame")
Buttons.Name = "Buttons"
Buttons.Size = UDim2.new(0, 60, 1, 0)
Buttons.Position = UDim2.new(1, -60, 0, 0)
Buttons.BackgroundTransparency = 1
Buttons.Parent = Top

local Maximize = Instance.new("TextButton")
Maximize.Name = "Maximize"
Maximize.Size = UDim2.new(0, 20, 0, 20)
Maximize.BackgroundTransparency = 1
Maximize.Text = "+"
Maximize.TextColor3 = Color3.fromRGB(0, 0, 0)
Maximize.Parent = Buttons

local Tab = Instance.new("Frame")
Tab.Name = "Tab"
Tab.Size = UDim2.new(1, 0, 0, 30)
Tab.BackgroundTransparency = 1
Tab.Parent = Sidebar

local Holder = Instance.new("Frame")
Holder.Name = "Main"
Holder.Size = UDim2.new(1, -150, 1, 0)
Holder.Position = UDim2.new(0, 150, 0, 0)
Holder.BackgroundColor3 = Theme.Secondary
Holder.Parent = MainTemplate

local Resize = Instance.new("Frame")
Resize.Name = "Resize"
Resize.Size = UDim2.new(1, 0, 1, 0)
Resize.BackgroundTransparency = 1
Resize.Parent = MainTemplate

local TopLeft = Instance.new("Frame")
TopLeft.Name = "TopLeft"
TopLeft.Size = UDim2.new(0, 10, 0, 10)
TopLeft.Position = UDim2.new(0, 0, 0, 0)
TopLeft.BackgroundTransparency = 1
TopLeft.Parent = Resize

local TopRight = Instance.new("Frame")
TopRight.Name = "TopRight"
TopRight.Size = UDim2.new(0, 10, 0, 10)
TopRight.Position = UDim2.new(1, -10, 0, 0)
TopRight.BackgroundTransparency = 1
TopRight.Parent = Resize

local BottomLeft = Instance.new("Frame")
BottomLeft.Name = "BottomLeft"
BottomLeft.Size = UDim2.new(0, 10, 0, 10)
BottomLeft.Position = UDim2.new(0, 0, 1, -10)
BottomLeft.BackgroundTransparency = 1
BottomLeft.Parent = Resize

local BottomRight = Instance.new("Frame")
BottomRight.Name = "BottomRight"
BottomRight.Size = UDim2.new(0, 10, 0, 10)
BottomRight.Position = UDim2.new(1, -10, 1, -10)
BottomRight.BackgroundTransparency = 1
BottomRight.Parent = Resize

-- Create MainExample
local MainExample = Instance.new("CanvasGroup")
MainExample.Name = "MainExample"
MainExample.Size = UDim2.new(1, 0, 1, 0)
MainExample.BackgroundTransparency = 1
MainExample.GroupTransparency = 1
MainExample.Visible = false
MainExample.Parent = MainTemplate

local ScrollingFrame = Instance.new("ScrollingFrame")
ScrollingFrame.Name = "ScrollingFrame"
ScrollingFrame.Size = UDim2.new(1, 0, 1, 0)
ScrollingFrame.BackgroundTransparency = 1
ScrollingFrame.ScrollBarThickness = 6
ScrollingFrame.Parent = MainExample

local UIPadding = Instance.new("UIPadding")
UIPadding.PaddingTop = UDim.new(0, 15)
UIPadding.Parent = ScrollingFrame

local UIListLayout = Instance.new("UIListLayout")
UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
UIListLayout.Parent = ScrollingFrame

ScrollingFrame.CanvasSize = UDim2.new(0, 0, 0, 0)

-- Create TabButtonExample
local TabButtonExample = Instance.new("TextButton")
TabButtonExample.Name = "TabButtonExample"
TabButtonExample.Size = UDim2.new(1, 0, 0, 30)
TabButtonExample.BackgroundTransparency = 1
TabButtonExample.Text = ""
TabButtonExample.Visible = false
TabButtonExample.Parent = MainTemplate

local TextLabel = Instance.new("TextLabel")
TextLabel.Size = UDim2.new(1, 0, 1, 0)
TextLabel.BackgroundTransparency = 1
TextLabel.TextColor3 = Theme.Tab
TextLabel.Parent = TabButtonExample

local UIPadding = Instance.new("UIPadding")
UIPadding.PaddingLeft = UDim.new(0, 20)
UIPadding.Parent = TabButtonExample

local Value = Instance.new("BoolValue")
Value.Value = false
Value.Parent = TabButtonExample

-- Create SectionExample
local SectionExample = Instance.new("TextLabel")
SectionExample.Name = "SectionExample"
SectionExample.Size = UDim2.new(1, 0, 0, 30)
BackgroundTransparency = 1
TextColor3 = Theme.Title
TextXAlignment = Enum.TextXAlignment.Left
SectionExample.Visible = false
SectionExample.Parent = MainTemplate

-- Create DropdownExample
local DropdownExample = Instance.new("CanvasGroup")
DropdownExample.Name = "DropdownExample"
DropdownExample.Size = UDim2.new(0, 300, 0, 200)
DropdownExample.Position = UDim2.new(0.5, 0, 0.5, 0)
DropdownExample.AnchorPoint = Vector2.new(0.5, 0.5)
DropdownExample.BackgroundColor3 = Theme.Secondary
DropdownExample.Visible = false
DropdownExample.Parent = MainTemplate

local Top = Instance.new("Frame")
Top.Name = "Top"
Top.Size = UDim2.new(1, 0, 0, 30)
Top.BackgroundTransparency = 1
Top.Parent = DropdownExample

local Buttons = Instance.new("Frame")
Buttons.Name = "Buttons"
Buttons.Size = UDim2.new(0, 60, 1, 0)
Buttons.Position = UDim2.new(1, 0, 0, 0)
Buttons.BackgroundTransparency = 1
Buttons.Parent = Top

local ScrollingFrame = Instance.new("ScrollingFrame")
ScrollingFrame.Name = "ScrollingFrame"
ScrollingFrame.Size = UDim2.new(1, 0, 1, -30)
ScrollingFrame.Position = UDim2.new(0, 0, 0, 30)
ScrollingFrame.BackgroundTransparency = 1
ScrollingFrame.ScrollBarThickness = 6
ScrollingFrame.Parent = DropdownExample

local UIListLayout = Instance.new("UIListLayout")
UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
UIListLayout.Parent = ScrollingFrame

-- Create DropdownButtonExample
local DropdownButtonExample = Instance.new("TextButton")
DropdownButtonExample.Name = "DropdownButtonExample"
DropdownButtonExample.Size = UDim2.new(1, 0, 0, 30)
DropdownButtonExample.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
DropdownButtonExample.Text = ""
DropdownButtonExample.Visible = false
DropdownButtonExample.Parent = MainTemplate

local Labels = Instance.new("Frame")
Labels.Name = "Labels"
Labels.Size = UDim2.new(1, 0, 1, 0)
Labels.BackgroundTransparency = 1
Labels.Parent = DropdownButtonExample

local Title = Instance.new("TextLabel")
Title.Name = "Title"
Title.Text = "Option"
Title.TextColor3 = Color3.fromRGB(0, 0, 0)
Title.Size = UDim2.new(1, 0, 1, 0)
Title.BackgroundTransparency = 1
Title.Parent = Labels

-- Create Components
-- Section
local Section = Instance.new("TextLabel")
Section.Name = "Section"
Section.Text = "Section"
Section.TextColor3 = Theme.Title
Section.BackgroundTransparency = 1
Section.Size = UDim2.new(1, 0, 0, 30)
Section.TextXAlignment = Enum.TextXAlignment.Left
Section.Parent = Components

-- Button
local Button = Instance.new("TextButton")
Button.Name = "Button"
Button.Size = UDim2.new(1, 0, 0, 50)
Button.BackgroundColor3 = Theme.Component
Button.Text = ""
Button.Parent = Components

local Labels = Instance.new("Frame")
Labels.Name = "Labels"
Labels.Size = UDim2.new(1, 0, 1, 0)
Labels.BackgroundTransparency = 1
Labels.Parent = Button

local Title = Instance.new("TextLabel")
Title.Name = "Title"
Title.Text = "Button"
Title.TextColor3 = Theme.Title
Title.Size = UDim2.new(1, 0, 0.5, 0)
Title.BackgroundTransparency = 1
Title.Parent = Labels

local Description = Instance.new("TextLabel")
Description.Name = "Description"
Description.Text = "Description"
Description.TextColor3 = Theme.Description
Description.Size = UDim2.new(1, 0, 0.5, 0)
Description.Position = UDim2.new(0, 0, 0.5, 0)
Description.BackgroundTransparency = 1
Description.Parent = Labels

-- Input
local Input = Instance.new("Frame")
Input.Name = "Input"
Input.Size = UDim2.new(1, 0, 0, 50)
Input.BackgroundColor3 = Theme.Component
Input.Parent = Components

local Labels = Instance.new("Frame")
Labels.Name = "Labels"
Labels.Size = UDim2.new(1, 0, 0.5, 0)
Labels.BackgroundTransparency = 1
Labels.Parent = Input

local Title = Instance.new("TextLabel")
Title.Name = "Title"
Title.Text = "Input"
Title.TextColor3 = Theme.Title
Title.Size = UDim2.new(1, 0, 1, 0)
Title.BackgroundTransparency = 1
Title.Parent = Labels

local Description = Instance.new("TextLabel")
Description.Name = "Description"
Description.Text = "Description"
Description.TextColor3 = Theme.Description
Description.Size = UDim2.new(1, 0, 1, 0)
Description.BackgroundTransparency = 1
Description.Parent = Labels

local Main = Instance.new("Frame")
Main.Name = "Main"
Main.Size = UDim2.new(1, 0, 0.5, 0)
Main.Position = UDim2.new(0, 0, 0.5, 0)
Main.BackgroundColor3 = Theme.Interactables
Main.Parent = Input

local InputText = Instance.new("TextBox")
InputText.Name = "Input"
InputText.Size = UDim2.new(1, 0, 1, 0)
InputText.BackgroundTransparency = 1
InputText.TextColor3 = Theme.Title
InputText.Parent = Main

-- Toggle
local Toggle = Instance.new("Frame")
Toggle.Name = "Toggle"
Toggle.Size = UDim2.new(1, 0, 0, 50)
Toggle.BackgroundColor3 = Theme.Component
Toggle.Parent = Components

local Labels = Instance.new("Frame")
Labels.Name = "Labels"
Labels.Size = UDim2.new(1, -60, 1, 0)
Labels.BackgroundTransparency = 1
Labels.Parent = Toggle

local Title = Instance.new("TextLabel")
Title.Name = "Title"
Title.Text = "Toggle"
Title.TextColor3 = Theme.Title
Title.Size = UDim2.new(1, 0, 0.5, 0)
Title.BackgroundTransparency = 1
Title.Parent = Labels

local Description = Instance.new("TextLabel")
Description.Name = "Description"
Description.Text = "Description"
Description.TextColor3 = Theme.Description
Description.Size = UDim2.new(1, 0, 0.5, 0)
Description.Position = UDim2.new(0, 0, 0.5, 0)
Description.BackgroundTransparency = 1
Description.Parent = Labels

local Value = Instance.new("BoolValue")
Value.Name = "Value"
Value.Value = false
Value.Parent = Toggle

local Main = Instance.new("Frame")
Main.Name = "Main"
Main.Size = UDim2.new(0, 40, 0, 20)
Main.Position = UDim2.new(1, -50, 0.5, -10)
Main.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Main.Parent = Toggle

local UICorner = Instance.new("UICorner")
UICorner.CornerRadius = UDim.new(1, 0)
UICorner.Parent = Main

local Circle = Instance.new("Frame")
Circle.Name = "Circle"
Circle.Size = UDim2.new(0, 14, 0, 14)
Circle.Position = UDim2.new(0, 3, 0.5, 0)
Circle.AnchorPoint = Vector2.new(0, 0.5)
Circle.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
Circle.Parent = Main

local UICorner2 = Instance.new("UICorner")
UICorner2.CornerRadius = UDim.new(1, 0)
UICorner2.Parent = Circle

-- Keybind
local Keybind = Instance.new("Frame")
Keybind.Name = "Keybind"
Keybind.Size = UDim2.new(1, 0, 0, 50)
Keybind.BackgroundColor3 = Theme.Component
Keybind.Parent = Components

local Labels = Instance.new("Frame")
Labels.Name = "Labels"
Labels.Size = UDim2.new(1, -70, 1, 0)
Labels.BackgroundTransparency = 1
Labels.Parent = Keybind

local Title = Instance.new("TextLabel")
Title.Name = "Title"
Title.Text = "Keybind"
Title.TextColor3 = Theme.Title
Title.Size = UDim2.new(1, 0, 0.5, 0)
Title.BackgroundTransparency = 1
Title.Parent = Labels

local Description = Instance.new("TextLabel")
Description.Name = "Description"
Description.Text = "Description"
Description.TextColor3 = Theme.Description
Description.Size = UDim2.new(1, 0, 0.5, 0)
Description.Position = UDim2.new(0, 0, 0.5, 0)
Description.BackgroundTransparency = 1
Description.Parent = Labels

local Main = Instance.new("Frame")
Main.Name = "Main"
Main.Size = UDim2.new(0, 60, 0, 30)
Main.Position = UDim2.new(1, -70, 0.5, -15)
Main.BackgroundColor3 = Theme.Interactables
Main.Parent = Keybind

local Options = Instance.new("TextLabel")
Options.Name = "Options"
Options.Size = UDim2.new(1, 0, 1, 0)
Options.BackgroundTransparency = 1
Options.Text = "Key"
Options.TextColor3 = Theme.Title
Options.Parent = Main

-- Dropdown
local Dropdown = Instance.new("Frame")
Dropdown.Name = "Dropdown"
Dropdown.Size = UDim2.new(1, 0, 0, 50)
Dropdown.BackgroundColor3 = Theme.Component
Dropdown.Parent = Components

local Labels = Instance.new("Frame")
Labels.Name = "Labels"
Labels.Size = UDim2.new(1, 0, 0.5, 0)
Labels.BackgroundTransparency = 1
Labels.Parent = Dropdown

local Title = Instance.new("TextLabel")
Title.Name = "Title"
Title.Text = "Dropdown"
Title.TextColor3 = Theme.Title
Title.Size = UDim2.new(1, 0, 1, 0)
Title.BackgroundTransparency = 1
Title.Parent = Labels

local Description = Instance.new("TextLabel")
Description.Name = "Description"
Description.Text = "Description"
Description.TextColor3 = Theme.Description
Description.Size = UDim2.new(1, 0, 1, 0)
Description.BackgroundTransparency = 1
Description.Parent = Labels

local Main = Instance.new("Frame")
Main.Name = "Main"
Main.Size = UDim2.new(1, 0, 0.5, 0)
Main.Position = UDim2.new(0, 0, 0.5, 0)
Main.BackgroundColor3 = Theme.Interactables
Main.Parent = Dropdown

local Options = Instance.new("TextLabel")
Options.Name = "Options"
Options.Size = UDim2.new(1, 0, 1, 0)
Options.BackgroundTransparency = 1
Options.Text = "Select..."
Options.TextColor3 = Theme.Title
Options.Parent = Main

-- Slider
local Slider = Instance.new("Frame")
Slider.Name = "Slider"
Slider.Size = UDim2.new(1, 0, 0, 50)
Slider.BackgroundColor3 = Theme.Component
Slider.Parent = Components

local Labels = Instance.new("Frame")
Labels.Name = "Labels"
Labels.Size = UDim2.new(1, 0, 0.5, 0)
Labels.BackgroundTransparency = 1
Labels.Parent = Slider

local Title = Instance.new("TextLabel")
Title.Name = "Title"
Title.Text = "Slider"
Title.TextColor3 = Theme.Title
Title.Size = UDim2.new(1, 0, 1, 0)
Title.BackgroundTransparency = 1
Title.Parent = Labels

local Description = Instance.new("TextLabel")
Description.Name = "Description"
Description.Text = "Description"
Description.TextColor3 = Theme.Description
Description.Size = UDim2.new(1, 0, 1, 0)
Description.BackgroundTransparency = 1
Description.Parent = Labels

local SliderMain = Instance.new("Frame")
SliderMain.Name = "Slider"
SliderMain.Size = UDim2.new(1, 0, 0.5, 0)
SliderMain.Position = UDim2.new(0, 0, 0.5, 0)
SliderMain.BackgroundTransparency = 1
SliderMain.Parent = Slider

local Main = Instance.new("Frame")
Main.Name = "Main"
Main.Size = UDim2.new(0, 50, 1, 0)
Main.Position = UDim2.new(1, -60, 0, 0)
Main.BackgroundTransparency = 1
Main.Parent = SliderMain

local Input = Instance.new("TextLabel")
Input.Name = "Input"
Input.Size = UDim2.new(1, 0, 1, 0)
Input.BackgroundTransparency = 1
Input.Text = "0"
Input.TextColor3 = Theme.Title
Input.Parent = Main

local Slide = Instance.new("Frame")
Slide.Name = "Slide"
Slide.Size = UDim2.new(1, -70, 0, 10)
Slide.Position = UDim2.new(0, 0, 0.5, -5)
Slide.BackgroundColor3 = Theme.Interactables
Slide.Parent = SliderMain

local UICorner = Instance.new("UICorner")
UICorner.CornerRadius = UDim.new(1, 0)
UICorner.Parent = Slide

local Fire = Instance.new("TextButton")
Fire.Name = "Fire"
Fire.Size = UDim2.new(1, 0, 1, 0)
Fire.BackgroundTransparency = 1
Fire.Text = ""
Fire.Parent = Slide

local Highlight = Instance.new("Frame")
Highlight.Name = "Highlight"
Highlight.Size = UDim2.new(0, 0, 1, 0)
Highlight.BackgroundColor3 = Color3.fromRGB(153, 155, 255)
Highlight.Parent = Slide

local UICorner2 = Instance.new("UICorner")
UICorner2.CornerRadius = UDim.new(1, 0)
UICorner2.Parent = Highlight

local Circle = Instance.new("Frame")
Circle.Name = "Circle"
Circle.Size = UDim2.new(0, 10, 0, 10)
Circle.Position = UDim2.new(1, -5, 0.5, -5)
Circle.AnchorPoint = Vector2.new(0.5, 0.5)
Circle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Circle.Parent = Highlight

local UICorner3 = Instance.new("UICorner")
UICorner3.CornerRadius = UDim.new(1, 0)
UICorner3.Parent = Circle

-- Paragraph
local Paragraph = Instance.new("Frame")
Paragraph.Name = "Paragraph"
Paragraph.Size = UDim2.new(1, 0, 0, 60)
Paragraph.BackgroundColor3 = Theme.Component
Paragraph.Parent = Components

local Labels = Instance.new("Frame")
Labels.Name = "Labels"
Labels.Size = UDim2.new(1, 0, 1, 0)
Labels.BackgroundTransparency = 1
Labels.Parent = Paragraph

local TitleLabel = Instance.new("TextLabel")
TitleLabel.Name = "Title"
TitleLabel.Text = "Paragraph"
TitleLabel.TextColor3 = Theme.Title
TitleLabel.Size = UDim2.new(1, 0, 0.5, 0)
TitleLabel.BackgroundTransparency = 1
TitleLabel.Parent = Labels

local DescriptionLabel = Instance.new("TextLabel")
DescriptionLabel.Name = "Description"
DescriptionLabel.Text = "Description"
DescriptionLabel.TextColor3 = Theme.Description
DescriptionLabel.Size = UDim2.new(1, 0, 0.5, 0)
DescriptionLabel.Position = UDim2.new(0, 0, 0.5, 0)
DescriptionLabel.BackgroundTransparency = 1
DescriptionLabel.TextWrapped = true
DescriptionLabel.Parent = Labels

-- Notification
local Notification = Instance.new("CanvasGroup")
Notification.Name = "Notification"
Notification.Size = UDim2.new(0, 300, 0, 100)
Notification.BackgroundColor3 = Theme.Primary
Notification.GroupTransparency = 1
Notification.Visible = false
Notification.Parent = Components

local Labels = Instance.new("Frame")
Labels.Name = "Labels"
Labels.Size = UDim2.new(1, 0, 1, 0)
Labels.BackgroundTransparency = 1
Labels.Parent = Notification

local Title = Instance.new("TextLabel")
Title.Name = "Title"
Title.Text = "Notification"
Title.TextColor3 = Theme.Title
Title.Size = UDim2.new(1, 0, 0.5, 0)
Title.BackgroundTransparency = 1
Title.Parent = Labels

local Description = Instance.new("TextLabel")
Description.Name = "Description"
Description.Text = "Description"
Description.TextColor3 = Theme.Description
Description.Size = UDim2.new(1, 0, 0.5, 0)
Description.Position = UDim2.new(0, 0, 0.5, 0)
Description.BackgroundTransparency = 1
Description.Parent = Labels

local Timer = Instance.new("Frame")
Timer.Name = "Timer"
Timer.Size = UDim2.new(1, 0, 0, 4)
Timer.Position = UDim2.new(0, 0, 1, -4)
Timer.BackgroundColor3 = Theme.Outline
Timer.Parent = Notification

local UIStroke = Instance.new("UIStroke")
UIStroke.Color = Theme.Outline
UIStroke.Parent = Notification

Blur = {
    new = function(frame, intensity)
        local effect = Instance.new("BlurEffect")
        effect.Size = intensity or 5
        effect.Parent = workspace.CurrentCamera
        return {root = effect}
    end
}

--// Tables for Data
local Animations = {}
local Blurs = {}
local Components = (Screen:FindFirstChild('Components'))
local Library = {}
local StoredInfo = {
    ['Sections'] = {},
    ['Tabs'] = {},
}
--// Animations [Window]
function Animations:Open(
    Window: CanvasGroup,
    Transparency: number,
    UseCurrentSize: boolean
)
    local Original = (UseCurrentSize and Window.Size) or Setup.Size
    local Multiplied = Multiply(Original, 1.1)
    local Shadow = Window:FindFirstChildOfClass('UIStroke')
    SetProperty(Shadow, { Transparency = 1 })
    SetProperty(Window, {
        Size = Multiplied,
        GroupTransparency = 1,
        Visible = true,
    })
    Tween(Shadow, 0.25, { Transparency = 0.5 })
    Tween(Window, 0.25, {
        Size = Original,
        GroupTransparency = Transparency or 0,
    })
end
function Animations:Close(Window: CanvasGroup)
    local Original = Window.Size
    local Multiplied = Multiply(Original, 1.1)
    local Shadow = Window:FindFirstChildOfClass('UIStroke')
    SetProperty(Window, {
        Size = Original,
    })
    Tween(Shadow, 0.25, { Transparency = 1 })
    Tween(Window, 0.25, {
        Size = Multiplied,
        GroupTransparency = 1,
    })
    task.wait(0.25)
    Window.Size = Original
    Window.Visible = false
end
function Animations:Component(Component: any, Custom: boolean)
    -- SKYBOY PATCH: tắt hover animation hoàn toàn (tránh bị “đen” khi rê chuột)
end
--// NEW: Improved Floating Icon Implementation
local FloatingIcon = {}
function FloatingIcon:Create()
    return icon
end

-- SKYBOY PATCH: helper tạo blocker modal để chặn tương tác ngoài popup
local function createInputBlocker(parent, z)
    local blocker = Instance.new('TextButton')
    blocker.Name = 'InputBlocker'
    blocker.BackgroundTransparency = 1
    blocker.AutoButtonColor = false
    blocker.Text = ''
    blocker.Size = UDim2.fromScale(1, 1)
    blocker.Position = UDim2.fromScale(0, 0)
    blocker.ZIndex = z or 50
    blocker.Modal = true
    blocker.Active = true
    blocker.Parent = parent
    return blocker
end

--// Library [Window]
function Library:CreateWindow(Settings: {
    Title: string,
    Size: UDim2,
    Transparency: number,
    MinimizeKeybind: Enum.KeyCode?,
    Blurring: boolean,
    Theme: string,
})
    local Window = Clone(Screen:WaitForChild('Main'))
    local Sidebar = Window:FindFirstChild('Sidebar')
    local Holder = Window:FindFirstChild('Main')
    local BG = Window:FindFirstChild('BackgroundShadow')
    local Tab = Sidebar:FindFirstChild('Tab')
    local Options = {}
    local Examples = {}
    local Opened = true
    local Maximized = false
    local BlurEnabled = false

    for Index, Example in next, Window:GetDescendants() do
        if Example.Name:find('Example') and not Examples[Example.Name] then
            Examples[Example.Name] = Example
        end
    end

    --// NEW: Add window controls to the top right of the entire UI
    local windowControls = Instance.new('Frame')
    windowControls.Name = 'WindowControls'
    windowControls.Size = UDim2.new(0, 60, 0, 30)
    windowControls.Position = UDim2.new(1, -60, 0, 0)
    windowControls.BackgroundTransparency = 1
    windowControls.ZIndex = 10
    windowControls.Parent = Window

    local layout = Instance.new('UIListLayout')
    layout.FillDirection = Enum.FillDirection.Horizontal
    layout.HorizontalAlignment = Enum.HorizontalAlignment.Right
    layout.VerticalAlignment = Enum.VerticalAlignment.Center
    layout.SortOrder = Enum.SortOrder.LayoutOrder
    layout.Padding = UDim.new(0, 5)
    layout.Parent = windowControls

    local minimizeBtn = Instance.new('TextButton')
    minimizeBtn.Name = 'MinimizeButton'
    minimizeBtn.Text = '-'
    minimizeBtn.TextColor3 = Color3.fromRGB(0, 0, 0)
    minimizeBtn.Size = UDim2.new(0, 20, 0, 20)
    minimizeBtn.BackgroundTransparency = 1
    minimizeBtn.LayoutOrder = 1
    minimizeBtn.ZIndex = 11
    minimizeBtn.Parent = windowControls

    local exitBtn = Instance.new('TextButton')
    exitBtn.Name = 'ExitButton'
    exitBtn.Text = 'X'
    exitBtn.TextColor3 = Color3.fromRGB(0, 0, 0)
    exitBtn.Size = UDim2.new(0, 20, 0, 20)
    exitBtn.BackgroundTransparency = 1
    exitBtn.LayoutOrder = 2
    exitBtn.ZIndex = 11
    exitBtn.Parent = windowControls

    -- Add button animations (đã no-op)
    Animations:Component(minimizeBtn, true)
    Animations:Component(exitBtn, true)

    -- SKYBOY PATCH: Exit chỉ ẨN (không destroy), giống minimize
    local function HideWindow()
        Window.Visible = false
        Opened = false
        if BlurEnabled then
            Blurs[Settings.Title].root.Parent = nil
        end
        -- (đã bỏ floatingIcon.Visible/Position)
    end

    -- Button functionality
    minimizeBtn.MouseButton1Click:Connect(HideWindow)
    exitBtn.MouseButton1Click:Connect(HideWindow)

    --// NEW: Properly structure the sidebar top bar with title and buttons
    local topBar = Sidebar:FindFirstChild('Top')
    if topBar then
        for _, child in ipairs(topBar:GetChildren()) do
            if
                child.Name == 'Title'
                or child.Name == 'WindowControls'
                or child.Name == 'TopBarContainer'
                or child.Name == 'TitleContainer'
                or child.Name == 'ButtonContainer'
            then
                child:Destroy()
            end
        end

        local topBarContainer = Instance.new('Frame')
        topBarContainer.Name = 'TopBarContainer'
        topBarContainer.Size = UDim2.new(1, 0, 1, 0)
        topBarContainer.Position = UDim2.new(0, 0, 0, 0)
        topBarContainer.BackgroundTransparency = 1
        topBarContainer.Parent = topBar

        local topBarLayout = Instance.new('UIListLayout')
        topBarLayout.FillDirection = Enum.FillDirection.Horizontal
        topBarLayout.HorizontalAlignment = Enum.HorizontalAlignment.Left
        topBarLayout.VerticalAlignment = Enum.VerticalAlignment.Center
        topBarLayout.SortOrder = Enum.SortOrder.LayoutOrder
        topBarLayout.Padding = UDim.new(0, 0)
        topBarLayout.Parent = topBarContainer

        local titleContainer = Instance.new('Frame')
        titleContainer.Name = 'TitleContainer'
        titleContainer.Size = UDim2.new(1, -70, 1, 0)
        titleContainer.BackgroundTransparency = 1
        titleContainer.LayoutOrder = 1
        titleContainer.Parent = topBarContainer

        local titleLabel = Instance.new('TextLabel')
        titleLabel.Name = 'Title'
        titleLabel.Text = Settings.Title or 'UI Library'
        titleLabel.Font = Enum.Font.GothamSemibold
        titleLabel.TextSize = 14
        titleLabel.TextColor3 = Color3.fromRGB(0, 0, 0) -- SKYBOY PATCH: chữ đen
        titleLabel.Size = UDim2.new(1, -10, 1, 0)
        titleLabel.Position = UDim2.new(0, 10, 0, 0)
        titleLabel.BackgroundTransparency = 1
        titleLabel.TextXAlignment = Enum.TextXAlignment.Left
        titleLabel.TextScaled = true
        titleLabel.TextWrapped = true
        titleLabel.Parent = titleContainer

        local buttonContainer = Instance.new('Frame')
        buttonContainer.Name = 'ButtonContainer'
        buttonContainer.Size = UDim2.new(0, 60, 1, 0)
        buttonContainer.BackgroundTransparency = 1
        buttonContainer.LayoutOrder = 2
        buttonContainer.Parent = topBarContainer

        local buttonLayout = Instance.new('UIListLayout')
        buttonLayout.FillDirection = Enum.FillDirection.Horizontal
        buttonLayout.HorizontalAlignment = Enum.HorizontalAlignment.Right
        buttonLayout.VerticalAlignment = Enum.VerticalAlignment.Center
        buttonLayout.SortOrder = Enum.SortOrder.LayoutOrder
        buttonLayout.Padding = UDim.new(0, 5)
        buttonLayout.Parent = buttonContainer

        for _, button in ipairs(Sidebar.Top.Buttons:GetChildren()) do
            if
                button:IsA('TextButton')
                and button.Name ~= 'Minimize'
                and button.Name ~= 'Close'
            then
                button.Parent = buttonContainer
                Animations:Component(button, true)
            end
        end
        Sidebar.Top.Buttons:Destroy()

        local function adjustTitleSize()
            local availableWidth = titleContainer.AbsoluteSize.X - 10
            local textWidth = titleLabel.TextBounds.X
            if textWidth > availableWidth then
                local scaleFactor = availableWidth / textWidth
                titleLabel.TextSize = math.max(8, 14 * scaleFactor)
            else
                titleLabel.TextSize = 14
            end
        end
        local resizeConnection
        resizeConnection = Window:GetPropertyChangedSignal('Size')
            :Connect(function()
                adjustTitleSize()
            end)
        adjustTitleSize()
    end

    --// UI Blur & More
    Drag(Window)
    Resizeable(Window, Vector2.new(411, 271), Vector2.new(9e9, 9e9))
    Setup.Transparency = Settings.Transparency or 0
    Setup.Size = Settings.Size
    Setup.ThemeMode = Settings.Theme or 'Dark'
    if Settings.Blurring then
        Blurs[Settings.Title] = Blur.new(Window, 5)
        BlurEnabled = true
    end
    if Settings.MinimizeKeybind then
        Setup.Keybind = Settings.MinimizeKeybind
    end
    --// Animate
    local Close = function()
        if Opened then
            if BlurEnabled then
                Blurs[Settings.Title].root.Parent = nil
            end
            Opened = false
            Animations:Close(Window)
            Window.Visible = false
        -- (đã bỏ floatingIcon.Visible = true)
        else
            Animations:Open(Window, Setup.Transparency)
            Opened = true
            if BlurEnabled then
                Blurs[Settings.Title].root.Parent = workspace.CurrentCamera
            end
            -- (đã bỏ floatingIcon.Visible = false)
        end
    end

    local function handleMaximizeButton()
        if Maximized then
            Maximized = false
            Tween(Window, 0.15, { Size = Setup.Size })
        else
            Maximized = true
            Tween(Window, 0.15, {
                Size = UDim2.fromScale(1, 1),
                Position = UDim2.fromScale(0.5, 0.5),
            })
        end
    end

    local maximizeButton = Sidebar:FindFirstChild('Top', true)
        :FindFirstChild('Maximize')
    if maximizeButton then
        maximizeButton.MouseButton1Click:Connect(handleMaximizeButton)
    end

    Services.Input.InputBegan:Connect(function(Input, Focused)
        if
            (Input == Setup.Keybind or Input.KeyCode = Setup.Keybind)
            and not Focused
        then
            Close()
        end
    end)

    --// Tab Functions
    function Options:SetTab(Name: string)
        for Index, Button in next, self.TabsHolder:GetChildren() do
            if Button:IsA('TextButton') then
                local Opened, SameName = Button.Value, (Button.Name == Name)
                local Padding = Button:FindFirstChildOfClass('UIPadding')

                if SameName and not Opened.Value then
                    Tween(Padding, 0.25, { PaddingLeft = UDim.new(0, 25) })
                    Tween(Button, 0.25, {
                        BackgroundTransparency = 0.9,
                        Size = UDim2.new(1, -15, 0, 30),
                    })
                    SetProperty(Opened, { Value = true })
                elseif not SameName and Opened.Value then
                    Tween(Padding, 0.25, { PaddingLeft = UDim.new(0, 20) })
                    Tween(Button, 0.25, {
                        BackgroundTransparency = 1,
                        Size = UDim2.new(1, -44, 0, 30),
                    })
                    SetProperty(Opened, { Value = false })
                end
            end
        end

        for Index, Main in next, Holder:GetChildren() do
            if Main:IsA('CanvasGroup') then
                local Opened, SameName = Main.Value, (Main.Name == Name)
                local Scroll = Main:FindFirstChild('ScrollingFrame')

                if SameName and not Opened.Value then
                    Opened.Value = true
                    Main.Visible = true

                    Tween(Main, 0.3, { GroupTransparency = 0 })
                    Tween(
                        Scroll['UIPadding'],
                        0.3,
                        { PaddingTop = UDim.new(0, 5) }
                    )
                elseif not SameName and Opened.Value then
                    Opened.Value = false

                    Tween(Main, 0.15, { GroupTransparency = 1 })
                    Tween(
                        Scroll['UIPadding'],
                        0.15,
                        { PaddingTop = UDim.new(0, 15) }
                    )

                    task.delay(0.2, function()
                        Main.Visible = false
                    end)
                end
            end
        end
    end

    function Options:EnsureTabsHolder(Example)
        if not self.TabsHolder then
            local TabsHolder = Instance.new('ScrollingFrame')
            TabsHolder.Name = 'TabsHolder'
            TabsHolder.Size = UDim2.new(0, 150, 1, 0)
            TabsHolder.Position = UDim2.new(0, 0, 0, 0)
            TabsHolder.CanvasSize = UDim2.new(0, 0, 0, 0)
            TabsHolder.ScrollBarThickness = 6
            TabsHolder.BackgroundTransparency = 1
            TabsHolder.Parent = Example.Parent

            local UIList = Instance.new('UIListLayout')
            UIList.SortOrder = Enum.SortOrder.LayoutOrder
            UIList.Parent = TabsHolder

            UIList:GetPropertyChangedSignal('AbsoluteContentSize')
                :Connect(function()
                    TabsHolder.CanvasSize =
                        UDim2.new(0, 0, 0, UIList.AbsoluteContentSize.Y)
                end)

            self.TabsHolder = TabsHolder
        end
        return self.TabsHolder
    end

    function Options:AddTabSection(Settings: { Name: string, Order: number })
        local Example = Examples['SectionExample']
        local Section = Clone(Example)

        local TabsHolder = self:EnsureTabsHolder(Example)

        SetProperty(Section, {
            Parent = TabsHolder,
            Text = Settings.Name,
            Name = Settings.Name,
            LayoutOrder = Settings.Order,
            Visible = true,
        })

        StoredInfo['Sections'][Settings.Name] = {
            Order = Settings.Order,
            Object = Section,
        }
    end

    function Options:AddTab(
        Settings: { Title: string, Icon: string, Section: string? }
    )
        if StoredInfo['Tabs'][Settings.Title] then
            error('[UI LIB]: A tab with the same name has already been created')
        end

        local Example, MainExample =
            Examples['TabButtonExample'], Examples['MainExample']
        local Main = Clone(MainExample)
        local Tab = Clone(Example)

        local TabsHolder = self:EnsureTabsHolder(Example)

        Destroy(Tab['ICO']) -- Always destroy ICO since no external images

        StoredInfo['Tabs'][Settings.Title] = { Tab }
        SetProperty(Tab['TextLabel'], { Text = Settings.Title })

        SetProperty(Main, {
            Parent = MainExample.Parent,
            Name = Settings.Title,
        })

        local SectionInfo = Settings.Section
            and StoredInfo['Sections'][Settings.Section]
        local LayoutOrder = SectionInfo and SectionInfo.Order
            or (#StoredInfo['Sections'] + 1)

        SetProperty(Tab, {
            Parent = TabsHolder,
            LayoutOrder = LayoutOrder,
            Name = Settings.Title,
            Visible = true,
        })

        Tab.MouseButton1Click:Connect(function()
            Options:SetTab(Tab.Name)
        end)

        return Main.ScrollingFrame
    end

    --// Notifications

    function Options:Notify(Settings: {
        Title: string,
        Description: string,
        Duration: number,
    })
        local Notification = Clone(Components['Notification'])
        local Title, Description = Options:GetLabels(Notification)
        local Timer = Notification['Timer']

        SetProperty(Title, { Text = Settings.Title })
        SetProperty(Description, { Text = Settings.Description })
        SetProperty(Notification, {
            Parent = Screen['Frame'],
        })

        task.spawn(function()
            local Duration = Settings.Duration or 2
            local Wait = task.wait

            Animations:Open(Notification, Setup.Transparency, true)
            Tween(Timer, Duration, { Size = UDim2.new(0, 0, 0, 4) })
            Wait(Duration)
            Animations:Close(Notification)
            Wait(1)
            Notification:Destroy()
        end)
    end

    --// Component Functions

    function Options:GetLabels(Component)
        local Labels = Component:FindFirstChild('Labels')

        return Labels.Title, Labels.Description
    end

    function Options:AddSection(Settings: { Name: string, Tab: Instance })
        local Section = Clone(Components['Section'])
        SetProperty(Section, {
            Text = Settings.Name,
            Parent = Settings.Tab,
            Visible = true,
        })
    end

    function Options:AddButton(Settings: {
        Title: string,
        Description: string,
        Tab: Instance,
        Callback: any,
    })
        local Button = Clone(Components['Button'])
        local Title, Description = Options:GetLabels(Button)

        local RightImage = Instance.new('TextLabel')
        RightImage.Name = 'RightImage'
        RightImage.Size = UDim2.new(0, 22, 0, 22)
        RightImage.Position = UDim2.new(1, -41, 0.5, -10)
        RightImage.Text = '>'
        RightImage.BackgroundTransparency = 1
        RightImage.TextColor3 = Color3.fromRGB(0, 0, 0)
        RightImage.Parent = Button

        Connect(Button.MouseButton1Click, Settings.Callback)
        Animations:Component(Button)
        SetProperty(Title, { Text = Settings.Title })
        SetProperty(Description, { Text = Settings.Description })
        SetProperty(Button, {
            Name = Settings.Title,
            Parent = Settings.Tab,
            Visible = true,
            Size = UDim2.new(1, -20, 0, 0),
        })
    end

    function Options:AddInput(Settings: {
        Title: string,
        Description: string,
        Tab: Instance,
        Callback: any,
    })
        local Input = Clone(Components['Input'])
        local Title, Description = Options:GetLabels(Input)
        local TextBox = Input['Main']['Input']

        Connect(Input.MouseButton1Click, function()
            TextBox:CaptureFocus()
        end)

        Connect(TextBox.FocusLost, function()
            Settings.Callback(TextBox.Text)
        end)

        Animations:Component(Input)
        SetProperty(Title, { Text = Settings.Title })
        SetProperty(Description, { Text = Settings.Description })
        SetProperty(Input, {
            Name = Settings.Title,
            Parent = Settings.Tab,
            Visible = true,
        })
    end

    function Options:AddToggle(Settings: {
        Title: string,
        Description: string,
        Default: boolean,
        Tab: Instance,
        Callback: any,
    })
        local Toggle = Clone(Components['Toggle'])
        local Title, Description = Options:GetLabels(Toggle)

        local On = Toggle['Value']
        local Main = Toggle['Main']
        local Circle = Main['Circle']

        -- SKYBOY PATCH: thêm viền đen + chỉnh màu khi OFF (trắng/đen), giữ tween
        local stroke = Main:FindFirstChildOfClass('UIStroke')
            or Instance.new('UIStroke')
        stroke.Thickness = 1
        stroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
        stroke.Parent = Main

        local Set = function(Value)
            if Value then
                Tween(
                    Main,
                    0.2,
                    { BackgroundColor3 = Color3.fromRGB(153, 155, 255) }
                )
                Tween(Circle, 0.2, {
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    Position = UDim2.new(1, -16, 0.5, 0),
                })
                stroke.Color = Theme.Outline or Color3.fromRGB(40, 40, 40)
            else
                stroke.Color = Color3.fromRGB(0, 0, 0)
                Tween(
                    Main,
                    0.2,
                    { BackgroundColor3 = Color3.fromRGB(255, 255, 255) }
                ) -- track trắng
                Tween(Circle, 0.2, {
                    BackgroundColor3 = Color3.fromRGB(0, 0, 0),
                    Position = UDim2.new(0, 3, 0.5, 0),
                }) -- nút đen
            end

            On.Value = Value
        end

        Connect(Toggle.MouseButton1Click, function()
            local Value = not On.Value

            Set(Value)
            Settings.Callback(Value)
        end)

        Animations:Component(Toggle)
        Set(Settings.Default)
        SetProperty(Title, { Text = Settings.Title })
        SetProperty(Description, { Text = Settings.Description })
        SetProperty(Toggle, {
            Name = Settings.Title,
            Parent = Settings.Tab,
            Visible = true,
        })
    end

    function Options:AddKeybind(Settings: {
        Title: string,
        Description: string,
        Tab: Instance,
        Callback: any,
    })
        local Dropdown = Clone(Components['Keybind'])
        local Title, Description = Options:GetLabels(Dropdown)
        local Bind = Dropdown['Main'].Options

        local Mouse = {
            Enum.UserInputType.MouseButton1,
            Enum.UserInputType.MouseButton2,
            Enum.UserInputType.MouseButton3,
        }
        local Types = {
            ['Mouse'] = 'Enum.UserInputType.MouseButton',
            ['Key'] = 'Enum.KeyCode.',
        }

        Connect(Dropdown.MouseButton1Click, function()
            local Time = tick()
            local Detect, Finished

            SetProperty(Bind, { Text = '...' })
            Detect = Connect(
                game.UserInputService.InputBegan,
                function(Key, Focused)
                    local InputType = Key.UserInputType

                    if not Finished and not Focused then
                        Finished = true

                        if table.find(Mouse, InputType) then
                            Settings.Callback(Key)
                            SetProperty(Bind, {
                                Text = tostring(InputType):gsub(
                                    Types.Mouse,
                                    'MB'
                                ),
                            })
                        elseif InputType == Enum.UserInputType.Keyboard then
                            Settings.Callback(Key)
                            SetProperty(Bind, {
                                Text = tostring(Key.KeyCode):gsub(
                                    Types.Key,
                                    ''
                                ),
                            })
                        end
                    end
                end
            )
        end)

        Animations:Component(Dropdown)
        SetProperty(Title, { Text = Settings.Title })
        SetProperty(Description, { Text = Settings.Description })
        SetProperty(Dropdown, {
            Name = Settings.Title,
            Parent = Settings.Tab,
            Visible = true,
        })
    end

    function Options:AddDropdown(Settings: {
        Title: string,
        Description: string,
        Options: { [string]: any },
        Tab: Instance,
        Callback: any,
        UpdateFunction: any?,
    })
        local Dropdown = Clone(Components['Dropdown'])
        local Title, Description = Options:GetLabels(Dropdown)
        local Text = Dropdown['Main'].Options

        local state = {
            options = Settings.Options or {},
            selection = nil,
            updateFunction = Settings.UpdateFunction,
        }

        -- SKYBOY PATCH: helper viền từng hàng
        local function addRowStroke(frame)
            local s = Instance.new('UIStroke')
            s.Thickness = 1
            s.Color = Color3.fromRGB(0, 0, 0)
            s.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
            s.Parent = frame
        end

        -- Function to refresh the dropdown content
        local function refreshDropdownContent(Example, ScrollingFrame)
            for _, child in ipairs(ScrollingFrame:GetChildren()) do
                if child:IsA('Frame') or child:IsA('TextButton') then
                    Destroy(child)
                end
            end

            for key, value in pairs(state.options) do
                local Button = Clone(Examples['DropdownButtonExample'])
                if not Button then
                    continue
                end
                local BtnTitle, BtnDescription = Options:GetLabels(Button)

                -- SKYBOY PATCH: nền trắng, chữ đen + viền
                SetProperty(
                    BtnTitle,
                    { Text = key, TextColor3 = Color3.fromRGB(0, 0, 0) }
                )
                if BtnDescription then
                    Destroy(BtnDescription)
                end
                SetProperty(Button, {
                    Parent = ScrollingFrame,
                    Visible = true,
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                })
                addRowStroke(Button)

                Connect(Button.MouseButton1Click, function()
                    state.selection = key
                    Text.Text = key
                    Settings.Callback(value)

                    -- Close popup
                    Tween(BG, 0.25, { BackgroundTransparency = 1 })
                    Animations:Close(Example)
                    task.wait(0.15)
                    -- blocker được hủy ở nơi tạo (đính kèm qua upvalue)
                    Destroy(Example)
                end)
            end
        end

        Connect(Dropdown.MouseButton1Click, function()
            local Example = Clone(Examples['DropdownExample'])
            if not Example then
                return
            end
            local ScrollingFrame = Example.ScrollingFrame

            -- SKYBOY PATCH: modal blocker + nút X (không Refresh)
            Tween(BG, 0.25, { BackgroundTransparency = 0.6 })
            SetProperty(Example, { Parent = Window })

            local modalBlocker =
                createInputBlocker(Window, (Example.ZIndex or 60) - 1)

            Animations:Open(Example, 0, true)

            -- xóa các nút cũ và thêm nút X
            for _, b in ipairs(Example.Top.Buttons:GetChildren()) do
                if b:IsA('TextButton') then
                    b:Destroy()
                end
            end
            local CloseBtn = Instance.new('TextButton')
            CloseBtn.Name = 'Close'
            CloseBtn.Size = UDim2.new(0, 30, 0, 20)
            CloseBtn.Position = UDim2.new(1, -35, 0, -2)
            CloseBtn.BackgroundTransparency = 1
            CloseBtn.Text = 'X'
            CloseBtn.Font = Enum.Font.GothamBold
            CloseBtn.TextSize = 14
            CloseBtn.TextColor3 = Color3.fromRGB(0, 0, 0)
            CloseBtn.Parent = Example.Top
            Connect(CloseBtn.MouseButton1Click, function()
                Tween(BG, 0.25, { BackgroundTransparency = 1 })
                Animations:Close(Example)
                task.wait(0.15)
                if modalBlocker then
                    modalBlocker:Destroy()
                end
                Destroy(Example)
            end)

            refreshDropdownContent(Example, ScrollingFrame)

            -- ensure khi chọn item cũng hủy blocker
            Example.Destroying:Connect(function()
                if modalBlocker then
                    modalBlocker:Destroy()
                end
            end)
        end)

        Animations:Component(Dropdown)
        SetProperty(Title, { Text = Settings.Title })
        SetProperty(Description, { Text = Settings.Description })
        SetProperty(
            Dropdown,
            { Name = Settings.Title, Parent = Settings.Tab, Visible = true }
        )

        local controller = {}
        function controller:Update(newOptions)
            if type(newOptions) ~= 'table' then
                if state.updateFunction then
                    newOptions = state.updateFunction()
                else
                    warn(
                        'Dropdown:Update requires a table of options or an UpdateFunction.'
                    )
                    return
                end
            end
            state.options = newOptions
            if state.selection and not state.options[state.selection] then
                state.selection = nil
                Text.Text = 'Select...'
                if Settings.Callback then
                    Settings.Callback(nil)
                end
            end
        end
        function controller:Refresh()
            if state.updateFunction then
                self:Update(state.updateFunction())
                return true
            end
            return false
        end
        function controller:GetOptions()
            return state.options
        end
        function controller:GetSelection()
            return state.selection
        end

        return controller
    end

    function Options:AddMultiDropdown(Settings: {
        Title: string,
        Description: string,
        Options: { [string]: any },
        Tab: Instance,
        Callback: any,
        UpdateFunction: any?,
    })
        local Dropdown = Clone(Components['Dropdown'])
        local Title, Description = Options:GetLabels(Dropdown)
        local Text = Dropdown['Main'].Options

        local state = {
            options = Settings.Options or {},
            selected = {},
            updateFunction = Settings.UpdateFunction,
        }

        local function updateCallback()
            local selectedValues = {}
            for _, key in ipairs(state.selected) do
                if state.options[key] then
                    table.insert(selectedValues, state.options[key])
                end
            end
            Settings.Callback(selectedValues)
            Text.Text = #state.selected > 0
                    and table.concat(state.selected, ', ')
                or 'Select...'
        end

        local function addRowStroke(frame)
            local s = Instance.new('UIStroke')
            s.Thickness = 1
            s.Color = Color3.fromRGB(0, 0, 0)
            s.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
            s.Parent = frame
        end

        local function refreshDropdownContent(Example, ScrollingFrame)
            for _, child in ipairs(ScrollingFrame:GetChildren()) do
                if child:IsA('Frame') or child:IsA('TextButton') then
                    Destroy(child)
                end
            end

            for key, value in pairs(state.options) do
                local Button = Clone(Examples['DropdownButtonExample'])
                if not Button then
                    continue
                end
                local BtnTitle, BtnDescription = Options:GetLabels(Button)

                local isSelected = table.find(state.selected, key)

                addRowStroke(Button) -- SKYBOY PATCH: viền

                -- SKYBOY PATCH: màu chữ & nền chọn/trống
                Button.BackgroundColor3 = isSelected
                        and Color3.fromRGB(230, 230, 230)
                    or Color3.fromRGB(255, 255, 255)
                BtnTitle.TextColor3 = Color3.fromRGB(0, 0, 0)

                local Checkmark = Button:FindFirstChild('Checkmark')
                    or Instance.new('TextLabel')
                Checkmark.Name = 'Checkmark'
                Checkmark.Size = UDim2.new(0, 16, 0, 16)
                Checkmark.Position = UDim2.new(1, -20, 0.5, -8)
                Checkmark.Text = '✓'
                Checkmark.BackgroundTransparency = 1
                Checkmark.TextColor3 = Color3.fromRGB(0, 0, 0)
                Checkmark.Visible = isSelected and true or false
                Checkmark.Parent = Button

                SetProperty(BtnTitle, { Text = key })
                if BtnDescription then
                    Destroy(BtnDescription)
                end
                SetProperty(Button, {
                    Parent = ScrollingFrame,
                    Visible = true,
                })

                Connect(Button.MouseButton1Click, function()
                    local selectionIndex = table.find(state.selected, key)
                    if selectionIndex then
                        table.remove(state.selected, selectionIndex)
                        Checkmark.Visible = false
                        Tween(
                            Button,
                            0.15,
                            { BackgroundColor3 = Color3.fromRGB(255, 255, 255) }
                        )
                    else
                        table.insert(state.selected, key)
                        Checkmark.Visible = true
                        Tween(
                            Button,
                            0.15,
                            { BackgroundColor3 = Color3.fromRGB(230, 230, 230) }
                        )
                    end
                    updateCallback()
                end)
            end
        end

        Connect(Dropdown.MouseButton1Click, function()
            local Example = Clone(Examples['DropdownExample'])
            if not Example then
                return
            end
            local ScrollingFrame = Example.ScrollingFrame

            -- SKYBOY PATCH: modal + nút X thay Refresh
            Tween(BG, 0.25, { BackgroundTransparency = 0.6 })
            SetProperty(Example, { Parent = Window })
            local modalBlocker =
                createInputBlocker(Window, (Example.ZIndex or 60) - 1)
            Animations:Open(Example, 0, true)

            for _, b in ipairs(Example.Top.Buttons:GetChildren()) do
                if b:IsA('TextButton') then
                    b:Destroy()
                end
            end
            local CloseBtn = Instance.new('TextButton')
            CloseBtn.Name = 'Close'
            CloseBtn.Size = UDim2.new(0, 30, 0, 20)
            CloseBtn.Position = UDim2.new(1, -35, 0, -2)
            CloseBtn.BackgroundTransparency = 1
            CloseBtn.Text = 'X'
            CloseBtn.Font = Enum.Font.GothamBold
            CloseBtn.TextSize = 14
            CloseBtn.TextColor3 = Color3.fromRGB(0, 0, 0)
            CloseBtn.Parent = Example.Top
            Connect(CloseBtn.MouseButton1Click, function()
                Tween(BG, 0.25, { BackgroundTransparency = 1 })
                Animations:Close(Example)
                task.wait(0.15)
                if modalBlocker then
                    modalBlocker:Destroy()
                end
                Destroy(Example)
            end)

            refreshDropdownContent(Example, ScrollingFrame)

            Example.Destroying:Connect(function()
                if modalBlocker then
                    modalBlocker:Destroy()
                end
            end)
        end)

        Animations:Component(Dropdown)
        SetProperty(Title, { Text = Settings.Title })
        SetProperty(Description, { Text = Settings.Description })
        SetProperty(
            Dropdown,
            { Name = Settings.Title, Parent = Settings.Tab, Visible = true }
        )

        local controller = {}
        function controller:Update(newOptions)
            if type(newOptions) ~= 'table' then
                if state.updateFunction then
                    newOptions = state.updateFunction()
                else
                    warn(
                        'MultiDropdown:Update requires a table of options or an UpdateFunction.'
                    )
                    return
                end
            end

            state.options = newOptions

            local selectionChanged = false
            local newSelected = {}
            for _, selectedKey in ipairs(state.selected) do
                if state.options[selectedKey] then
                    table.insert(newSelected, selectedKey)
                else
                    selectionChanged = true
                end
            end

            if selectionChanged then
                state.selected = newSelected
                updateCallback()
            end
        end
        function controller:Refresh()
            if state.updateFunction then
                self:Update(state.updateFunction())
                return true
            end
            return false
        end
        function controller:GetOptions()
            return state.options
        end
        function controller:GetSelections()
            return state.selected
        end

        return controller
    end

    function Options:AddSlider(Settings: {
        Title: string,
        Description: string,
        MaxValue: number,
        AllowDecimals: boolean,
        DecimalAmount: number,
        Tab: Instance,
        Callback: any,
    })
        local Slider = Clone(Components['Slider'])
        local Title, Description = Options:GetLabels(Slider)

        local Main = Slider['Slider']
        local Amount = Main['Main'].Input
        local Slide = Main['Slide']
        local Fire = Slide['Fire']
        local Fill = Slide['Highlight']
        local Circle = Fill['Circle']

        local Active = false
        local Value = 0

        local SetNumber = function(Number)
            if Settings.AllowDecimals then
                local Power = 10 ^ (Settings.DecimalAmount or 2)
                Number = math.floor(Number * Power + 0.5) / Power
            else
                Number = math.round(Number)
            end

            return Number
        end

        local Update = function(Number)
            local Scale = (Player.Mouse.X - Slide.AbsolutePosition.X)
                / Slide.AbsoluteSize.X
            Scale = (Scale > 1 and 1) or (Scale < 0 and 0) or Scale

            if Number then
                Number = (Number > Settings.MaxValue and Settings.MaxValue)
                    or (Number < 0 and 0)
                    or Number
            end

            Value = SetNumber(Number or (Scale * Settings.MaxValue))
            Amount.Text = Value
            Fill.Size = UDim2.fromScale(
                (Number and Number / Settings.MaxValue) or Scale,
                1
            )
            Settings.Callback(Value)
        end

        local Activate = function()
            Active = true

            repeat
                task.wait()
                Update()
            until not Active
        end

        Connect(Amount.FocusLost, function()
            Update(tonumber(Amount.Text) or 0)
        end)

        Connect(Fire.MouseButton1Down, Activate)
        Connect(Services.Input.InputEnded, function(Input)
            if
                Input.UserInputType == Enum.UserInputType.MouseButton1
                or Input.UserInputType == Enum.UserInputType.Touch
            then
                Active = false
            end
        end)

        Fill.Size = UDim2.fromScale(Value, 1)
        Animations:Component(Slider)
        SetProperty(Title, { Text = Settings.Title })
        SetProperty(Description, { Text = Settings.Description })
        SetProperty(Slider, {
            Name = Settings.Title,
            Parent = Settings.Tab,
            Visible = true,
        })
    end

    function Options:AddParagraph(Settings: {
        Title: string,
        Description: string,
        Tab: Instance,
        UpdateFunction: any?,
    })
        local Paragraph = Clone(Components['Paragraph'])
        local TitleLabel, DescriptionLabel = Options:GetLabels(Paragraph)

        SetProperty(TitleLabel, { Text = Settings.Title or 'Paragraph' })
        SetProperty(DescriptionLabel, { Text = Settings.Description or '' })
        SetProperty(Paragraph, {
            Parent = Settings.Tab,
            Visible = true,
        })

        if Settings.UpdateFunction then
            task.spawn(function()
                while Paragraph.Parent do
                    local newData = Settings.UpdateFunction()
                    if newData and type(newData) == 'table' then
                        if newData.Title then
                            TitleLabel.Text = newData.Title
                        end
                        if newData.Description then
                            DescriptionLabel.Text = newData.Description
                        end
                    end
                    task.wait(1)
                end
            end)
        end

        return Paragraph
    end

    local Themes = {
        Names = {
            ['Paragraph'] = function(Label)
                if Label:IsA('TextButton') then
                    Label.BackgroundColor3 = Color(Theme.Component, 5, 'Dark')
                end
            end,

            ['Title'] = function(Label)
                if Label:IsA('TextLabel') then
                    Label.TextColor3 = Color3.fromRGB(0, 0, 0) -- SKYBOY PATCH: mọi Title là chữ đen (đảm bảo topbar nhìn rõ)
                end
            end,

            ['Description'] = function(Label)
                if Label:IsA('TextLabel') then
                    Label.TextColor3 = Theme.Description
                end
            end,

            ['Section'] = function(Label)
                if Label:IsA('TextLabel') then
                    Label.TextColor3 = Theme.Title
                end
            end,

            ['Options'] = function(Label)
                if Label:IsA('TextLabel') and Label.Parent.Name == 'Main' then
                    Label.TextColor3 = Theme.Title
                end
            end,

            ['Notification'] = function(Label)
                if Label:IsA('CanvasGroup') then
                    Label.BackgroundColor3 = Theme.Primary
                    Label.UIStroke.Color = Theme.Outline
                end
            end,

            ['TextLabel'] = function(Label)
                if
                    Label:IsA('TextLabel')
                    and Label.Parent:FindFirstChild('List')
                then
                    Label.TextColor3 = Theme.Tab
                end
            end,

            ['Main'] = function(Label)
                if Label:IsA('Frame') then
                    if Label.Parent == Window then
                        Label.BackgroundColor3 = Theme.Secondary
                    elseif Label.Parent:FindFirstChild('Value') then
                        -- SKYBOY PATCH: không tự ép màu toggle khi OFF (để giữ scheme trắng/đen ở Set())
                        -- do nothing
                    else
                        Label.BackgroundColor3 = Theme.Interactables
                    end
                elseif Label:FindFirstChild('Padding') then
                    Label.TextColor3 = Theme.Title
                end
            end,

            ['Amount'] = function(Label)
                if Label:IsA('Frame') then
                    Label.BackgroundColor3 = Theme.Interactables
                end
            end,

            ['Slide'] = function(Label)
                if Label:IsA('Frame') then
                    Label.BackgroundColor3 = Theme.Interactables
                end
            end,

            ['Input'] = function(Label)
                if Label:IsA('TextLabel') then
                    Label.TextColor3 = Theme.Title
                elseif Label:FindFirstChild('Labels') then
                    Label.BackgroundColor3 = Theme.Component
                elseif Label:IsA('TextBox') and Label.Parent.Name == 'Main' then
                    Label.TextColor3 = Theme.Title
                end
            end,

            ['Outline'] = function(Stroke)
                if Stroke:IsA('UIStroke') then
                    Stroke.Color = Theme.Outline
                end
            end,

            ['DropdownExample'] = function(Label)
                Label.BackgroundColor3 = Theme.Secondary
            end,

            ['Underline'] = function(Label)
                if Label:IsA('Frame') then
                    Label.BackgroundColor3 = Theme.Outline
                end
            end,
        },

        Classes = {
            ['ImageLabel'] = function(Label)
                Label.ImageColor3 = Theme.Icon
            end,

            ['TextLabel'] = function(Label)
                if Label:FindFirstChild('Padding') then
                    Label.TextColor3 = Theme.Title
                end
            end,

            ['TextButton'] = function(Label)
                if Label:FindFirstChild('Labels') then
                    Label.BackgroundColor3 = Theme.Component
                end
            end,

            ['ScrollingFrame'] = function(Label)
                Label.ScrollBarImageColor3 = Theme.Component
            end,
        },
    }

    function Options:SetTheme(Info)
        Theme = Info or Theme

        Window.BackgroundColor3 = Theme.Primary
        Holder.BackgroundColor3 = Theme.Secondary
        Window.UIStroke.Color = Theme.Shadow

        for Index, Descendant in next, Screen:GetDescendants() do
            local Name, Class =
                Themes.Names[Descendant.Name],
                Themes.Classes[Descendant.ClassName]

            if Name then
                Name(Descendant)
            elseif Class then
                Class(Descendant)
            end
        end
    end

    --// Changing Settings

    function Options:SetSetting(Setting, Value) --// Available settings - Size, Transparency, Blur, Theme
        if Setting == 'Size' then
            Window.Size = Value
            Setup.Size = Value
        elseif Setting == 'Transparency' then
            Window.GroupTransparency = Value
            Setup.Transparency = Value

            for Index, Notification in next, Screen:GetDescendants() do
                if
                    Notification:IsA('CanvasGroup')
                    and Notification.Name == 'Notification'
                then
                    Notification.GroupTransparency = Value
                end
            end
        elseif Setting == 'Blur' then
            local AlreadyBlurred, Root = Blurs[Settings.Title], nil

            if AlreadyBlurred then
                Root = Blurs[Settings.Title]['root']
            end

            if Value then
                BlurEnabled = true

                if not AlreadyBlurred or not Root then
                    Blurs[Settings.Title] = Blur.new(Window, 5)
                elseif Root and not Root.Parent then
                    Root.Parent = workspace.CurrentCamera
                end
            elseif not Value and (AlreadyBlurred and Root and Root.Parent) then
                Root.Parent = nil
                BlurEnabled = false
            end
        elseif Setting == 'Theme' and typeof(Value) == 'table' then
            Options:SetTheme(Value)
        elseif Setting == 'Keybind' then
            Setup.Keybind = Value
        else
            warn(
                "Tried to change a setting that doesn't exist or isn't available to change."
            )
        end
    end

    SetProperty(
        Window,
        { Size = Settings.Size, Visible = true, Parent = Screen }
    )
    Animations:Open(Window, Settings.Transparency or 0)

    return Options
end

return Library
